version: 2

# The following stanza defines a map named defaults with a variable that may be
# inserted using the YAML merge (<<: *) key later in the file to save some
# typing. See http://yaml.org/type/merge.html for details.
defaults: &defaults
  environment:
    - DOCKER_REPOSITORY: "sportsdirect/reaction"
    - DOCKER_NAMESPACE: "sportsdirect"
    - DOCKER_NAME: "reaction"
    - GLOBAL_CACHE_VERSION: "v2"
    - TOOL_NODE_FLAGS: "--max-old-space-size=4096"
  working_directory: ~/reaction-app
  docker:
    - image: circleci/node:8-stretch

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "5c:d7:27:76:d6:6b:f3:b2:db:04:7f:a8:0e:bd:8b:a6"
      - run:
          name: Checkout git submodules
          command: |
            git submodule update --init --recursive
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          name: Restoring Meteor cache
          key: reaction-v2-meteor
      - run:
          name: Install Meteor
          command: |
            if [[ -f ~/.meteor/meteor ]]; then \
              printf "\nMeteor already installed. Creating symlink.\n"
              sudo ln -s ~/.meteor/meteor /usr/local/bin/meteor;
            else
              printf "\Installing Meteor\n"
              curl https://install.meteor.com | /bin/sh
            fi
      - save_cache:
          name: Saving Meteor to cache
          key: reaction-v2-meteor-{{ epoch }}
          paths:
            - ~/.meteor
      - run:
          name: Meteor NPM Install
          command: meteor npm install
      - run:
          name: Build dist bundle
          command: meteor build --directory ../build/
      - run:
          name: Check .js file size
          command: |
            maxSize=2967000
            size=$( wc -c ../build/bundle/programs/web.browser/*.js | awk '{$1=$1};1' | cut -d " " -f 1 )
            if [[ $size -gt $maxSize ]]; then
              echo "The production js file has size" $size "which exceeds limit of" $maxSize 1>&2
              exit 3
            else
              echo "The js file size is" $size
            fi
      - run:
          name: Check .css file size
          command: |
            maxSize=24888
            size=$( wc -c ../build/bundle/programs/web.browser/*.css | awk '{$1=$1};1' | cut -d " " -f 1 )
            if [[ $size -gt $maxSize ]]; then
              echo "The production js file has size" $size "which exceeds limit of" $maxSize 1>&2
              exit 3
            else
              echo "The css file size is" $size
            fi
      # Store node_modules dependency cache.
      # Saved with package.json checksum and timestamped branch name keys.
      - save_cache:
          key: reaction-v2-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - save_cache:
          key: reaction-v2-node-modules-{{ .Branch }}-{{ epoch }}
          paths:
            - node_modules

  docker-build:
    <<: *defaults
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "5c:d7:27:76:d6:6b:f3:b2:db:04:7f:a8:0e:bd:8b:a6"
      - run:
          name: Checkout git submodules
          command: |
            git submodule update --init --recursive
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: docker-cache
      - run:
          name: Discover Docker Tags
          command: |
            mkdir -p docker-cache
            .circleci/bin/docker-tags "$CIRCLE_SHA1" "$CIRCLE_BRANCH" | sed 's/\//-/g' \
              > docker-cache/docker-tags.txt
      - run:
          name: Docker build
          command: |
            docker build \
              --build-arg TOOL_NODE_FLAGS="--max-old-space-size=4096" \
              -t "$DOCKER_REPOSITORY:$CIRCLE_SHA1" .
            mkdir -p docker-cache
            docker save \
              -o docker-cache/docker-image.tar \
              "$DOCKER_REPOSITORY:$CIRCLE_SHA1"
          no_output_timeout: 30m
      - persist_to_workspace:
          root: docker-cache
          paths:
            - docker-image.tar
            - docker-tags.txt

  docker-push:
    <<: *defaults
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: docker-cache
      - run:
          name: Load Docker Image
          command: |
            docker load < docker-cache/docker-image.tar
      - run:
          name: Tag Docker Image
          command: |
            cat docker-cache/docker-tags.txt \
              | xargs -t -I % \
                docker tag \
                  "$DOCKER_REPOSITORY:$CIRCLE_SHA1" \
                  "$DOCKER_REPOSITORY:%"
      - run:
          name: Docker Push
          command: |
            if [ -z "$CIRCLE_PR_USERNAME" ]; then \
              docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
              docker push "$DOCKER_REPOSITORY:$CIRCLE_SHA1"
              cat docker-cache/docker-tags.txt \
                | xargs -t -I % \
                  docker push "$DOCKER_REPOSITORY:%"
            else
              echo "No deploy for forks"
            fi

  deploy-to-ecs-release-branch:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Deploy new task definition and update service in ECS
          command: |
            .circleci/bin/ecs-deploy-release-branch.sh
          no_output_timeout: 30m

  deploy-to-ecs-feature-branch:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Deploy new task definition and update service in ECS
          command: |
            .circleci/bin/ecs-deploy-feature-branch.sh
          no_output_timeout: 30m

  deploy-to-ecs-ems-develop-branch:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Deploy new task definition and update service in ECS
          command: |
            .circleci/bin/ecs-deploy-ems-develop-branch.sh
          no_output_timeout: 30m

  deploy-to-ecs-bobs-develop-branch:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Deploy new task definition and update service in ECS
          command: |
            .circleci/bin/ecs-deploy-bobs-develop-branch.sh
          no_output_timeout: 30m

  deploy-staging:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Update helm chart for reaction-core service in kubernetes staging env.
          command: |
            .circleci/bin/deploy-staging.sh
          no_output_timeout: 30m

  deploy-int:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Update helm chart for reaction-core service in kubernetes int env.
          command: |
            .circleci/bin/deploy-int.sh
          no_output_timeout: 30m

  deploy-docs:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: sudo apt-get -y -qq install awscli
      - run:
          name: NPM Install JSDoc
          command: sudo npm install -g jsdoc
      - run:
          name: Build JSDoc files
          command: |
            jsdoc . \
              --verbose \
              --configure .reaction/jsdoc/jsdoc.json \
              --readme .reaction/jsdoc/templates/static/README.md
      - run:
          name: Deploy Doc files to S3
          command: |
            if [[ "${API_DOC_BUCKET}" && "${API_DOC_BUCKET_REGION}" ]]; then
              aws s3 sync /tmp/reaction-docs ${API_DOC_BUCKET} --delete --region ${API_DOC_BUCKET_REGION}
            else
              echo "S3 bucket configuration not found for jsdocs"
              echo "Set API_DOC_BUCKET and API_DOC_BUCKET_REGION to build and deploy jsdocs to S3"
              exit 1;
            fi

  lint-javascript:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-v2-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - reaction-v2-node-modules-{{ .Branch }}
            - reaction-v2-node-modules-master
      - run:
          name: Run Lint
          command: |
            npm run lint -- --quiet

  graphql-lint:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-v2-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - reaction-v2-node-modules-{{ .Branch }}
            - reaction-v2-node-modules-master
      - run:
          name: Lint GraphQL schemas
          command: |
            npm run lint:gql

  test-app:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          name: Restoring Meteor cache
          key: reaction-v2-meteor
      - run:
          name: Link Restored Meteor
          command: sudo ln -s ~/.meteor/meteor /usr/local/bin/meteor
      - restore_cache:
          # Fall back to less specific caches
          keys:
            - reaction-v2-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - reaction-v2-node-modules-{{ .Branch }}
            - reaction-v2-node-modules-master
      - run:
          name: Load App Plugins
          command: node --experimental-modules ./.reaction/scripts/build.mjs
      - run:
          name: Run Meteor Integration Tests
          command: .circleci/tests.sh

  test-unit:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-v2-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - reaction-v2-node-modules-{{ .Branch }}
            - reaction-v2-node-modules-master
      - run:
          name: Run Unit Tests
          command: npm run test:unit

  test-integration:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-v2-node-modules-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - reaction-v2-node-modules-{{ .Branch }}
            - reaction-v2-node-modules-master
      - run:
          name: Run Integration Tests
          command: npm run test:integration

  test-e2e:
    <<: *defaults
    docker:
      - image: reactioncommerce/reaction-automation-client:latest
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run Tests
          command: |
            docker run -t -e URL=${STAGING_URL} reactioncommerce/reaction-automation-client:latest npm run-script chrome

  test-metrics:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: California
          command: |
            .circleci/bin/calibre-deploy.sh ${STAGING_URL} California
      - run:
          name: North Virginia
          command: |
            .circleci/bin/calibre-deploy.sh ${STAGING_URL} NorthVirginia
      - run:
          name: London
          command: |
            .circleci/bin/calibre-deploy.sh ${STAGING_URL} London
      - run:
          name: Frankfurt
          command: |
            .circleci/bin/calibre-deploy.sh ${STAGING_URL} Frankfurt

  lint-dockerfile:
    <<: *defaults
    docker:
      - image: hadolint/hadolint:v1.6.6-6-g254b4ff
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Dockerfile Lint
          command: |
            hadolint Dockerfile

  validate-secrets:
    docker:
      - image: "stedolan/jq"
        entrypoint: "/bin/bash"
    steps:
      - checkout
      - run:
          command: "./bin/validate-secrets"

workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          requires:
            - validate-secrets
      - lint-dockerfile
      - validate-secrets
      - test-app:
          requires:
            - build
      - test-unit:
          requires:
            - build
      - test-integration:
          requires:
            - build
      - test-e2e:
          requires:
            - deploy-to-ecs-release-branch
      - test-metrics:
          requires:
            - deploy-to-ecs-release-branch
      - lint-javascript:
          requires:
            - build
      - graphql-lint:
          requires:
            - build
      - docker-build:
          context: reaction-build-read
      - docker-push:
          context: reaction-publish-docker
          requires:
            - docker-build
            - lint-javascript
            - test-app
            - test-unit
            - test-integration
      - deploy-to-ecs-release-branch:
          requires:
            - docker-push
            - validate-secrets
          filters:
            branches:
              only: /^release-2.*/
      # - deploy-to-ecs-feature-branch:
      #     requires:
      #       - docker-push
      #     filters:
      #       branches:
      #         only: /^feat.*/
      # - deploy-to-ecs-ems-develop-branch:
      #     requires:
      #       - docker-push
      #     filters:
      #       branches:
      #         only: /^develop.*/
      # - deploy-to-ecs-bobs-develop-branch:
      #     requires:
      #       - docker-push
      #     filters:
      #       branches:
      #         only: /^develop.*/
      - deploy-docs:
          requires:
            - test-unit
            - test-app
            - docker-build
          filters:
            branches:
              only: /^master$/
      - approve-deploy-int:
          type: approval
          requires:
            - docker-push
            - validate-secrets
          filters:
            branches:
              ignore: develop
      - deploy-int:
          requires:
            - approve-deploy-int
          filters:
            branches:
              ignore: develop
      - deploy-staging:
          requires:
            - docker-push
            - validate-secrets
          filters:
            branches:
              only: develop
      - validate-secrets
